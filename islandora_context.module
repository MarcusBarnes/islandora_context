<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

/**
 * Implements hook_theme().
 */
function islandora_context_theme() {
  $items = array();
  $items['islandora_context_reaction_inserted_message'] = array(
    'variables' => array('message_text' => NULL),
    'path' => drupal_get_path('module', 'islandora_context') . '/theme',
    'template' => 'islandora-context-reaction-inserted-message',
    'file' => 'islandora_context_theme.inc',
  );
  return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function islandora_context_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_context_plugins().
 */
function islandora_context_context_plugins() {
  $plugins = array();
  $plugins['islandora_context_condition_is_islandora_object'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_condition_is_islandora_object.inc',
      'class' => 'IslandoraContextConditionIsIslandoraObject',
      'parent' => 'context_condition',
    ),
  );
  $plugins['islandora_context_condition_namespace'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_condition_namespace.inc',
      'class' => 'IslandoraContextConditionNamespace',
      'parent' => 'context_condition',
    ),
  );
  $plugins['islandora_context_condition_collection_member'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_condition_collection_member.inc',
      'class' => 'IslandoraContextConditionCollectionMember',
      'parent' => 'context_condition',
    ),
  );
  $plugins['islandora_context_condition_keyword_in_datastream'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_condition_keyword_in_datastream.inc',
      'class' => 'IslandoraContextConditionKeywordInDatastream',
      'parent' => 'context_condition',
    ),
  );
  $plugins['islandora_context_condition_relationship'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_condition_relationship.inc',
      'class' => 'IslandoraContextConditionRelationship',
      'parent' => 'context_condition',
    ),
  );
  $plugins['islandora_context_condition_rdf_requested'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_condition_rdf_requested.inc',
      'class' => 'IslandoraContextConditionRdfRequested',
      'parent' => 'context_condition',
    ),
  );

  $plugins['islandora_context_reaction_insert_text'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_reaction_insert_text.inc',
      'class' => 'IslandoraContextReactionInsertText',
      'parent' => 'context_reaction',
    ),
  );
  $plugins['islandora_context_reaction_display_solr_metadata'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_reaction_display_solr_metadata.inc',
      'class' => 'IslandoraContextReactionDisplaySolrMetadata',
      'parent' => 'context_reaction',
    ),
  );
  $plugins['islandora_context_reaction_return_rdf'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'islandora_context') . '/plugins',
      'file' => 'islandora_context_reaction_return_rdf.inc',
      'class' => 'IslandoraContextReactionReturnRdf',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function islandora_context_context_registry() {
  return array(
    'conditions' => array(
      'islandora_context_condition_is_islandora_object' => array(
        'title' => t('Is Islandora Object'),
        'description' => t("Choose this condition if you want the context to apply to all Islandora objects."),
        'plugin' => 'islandora_context_condition_is_islandora_object',
      ),
      'islandora_context_condition_namespace' => array(
        'title' => t('Islandora PID Namespace'),
        'description' => t("Choose this condition if you want to detect an object's PID namespace."),
        'plugin' => 'islandora_context_condition_namespace',
      ),
      'islandora_context_condition_collection_member' => array(
        'title' => t('Islandora Collection Membership'),
        'description' => t("Choose this condition if you want to detect an object's membership in a collection."),
        'plugin' => 'islandora_context_condition_collection_member',
      ),
      'islandora_context_condition_keyword_in_datastream' => array(
        'title' => t('Islandora Keyword in Datastream'),
        'description' => t("Choose this condition if you want to detect keywords in an XML or text datastream."),
        'plugin' => 'islandora_context_condition_keyword_in_datastream',
      ),
      'islandora_context_condition_relationship' => array(
        'title' => t('Islandora Relationship'),
        'description' => t("Choose this condition if you want to detect a particluar relationship defined in the object's RELS-EXT."),
        'plugin' => 'islandora_context_condition_relationship',
      ),
      'islandora_context_condition_rdf_requested' => array(
        'title' => t('RDF has been requested'),
        'description' => t("Choose this condition if you want to detect if a request has been made for RDF XML."),
        'plugin' => 'islandora_context_condition_rdf_requested',
      ),
    ),
    'reactions' => array(
      'islandora_context_reaction_insert_text' => array(
        'title' => t("Insert text into Islandora object's display"),
        'description' => t("Insert text into an object's display."),
        'plugin' => 'islandora_context_reaction_insert_text',
      ),
      'islandora_context_reaction_display_solr_metadata' => array(
        'title' => t("Display an Islandora Solr Metadata profile"),
        'description' => t("Display a Solr Metadata profile."),
        'plugin' => 'islandora_context_reaction_display_solr_metadata',
      ),
      'islandora_context_reaction_return_rdf' => array(
        'title' => t("Return RDF for an Islandora object"),
        'description' => t("Returns RDF representation of an Islandora object."),
        'plugin' => 'islandora_context_reaction_return_rdf',
      ),
    ),
  );
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_context_islandora_view_object(AbstractObject $object) {
  // Check for conditions that we want to set when an object is viewed.
  if ($plugin = context_get_plugin('condition', 'islandora_context_condition_is_islandora_object')) {
    $plugin->execute($object);
  }
  if ($plugin = context_get_plugin('condition', 'islandora_context_condition_namespace')) {
    $plugin->execute($object);
  }
  if ($plugin = context_get_plugin('condition', 'islandora_context_condition_collection_member')) {
    $plugin->execute($object);
  }
  if ($plugin = context_get_plugin('condition', 'islandora_context_condition_keyword_in_datastream')) {
    $plugin->execute($object);
  }
  if ($plugin = context_get_plugin('condition', 'islandora_context_condition_relationship')) {
    $plugin->execute($object);
  }
  if ($plugin = context_get_plugin('condition', 'islandora_context_condition_rdf_requested')) {
    $plugin->execute($object);
  }
  return array();
}

/**
 * Implements hook_islandora_view_object_alter().
 */
function islandora_context_islandora_view_object_alter(&$object, &$rendered) {
  // Check for reactions that alter the output of an object's display output.
  if ($plugin = context_get_plugin('reaction', 'islandora_context_reaction_return_rdf')) {
    $plugin->execute($object);
  }
  if ($plugin = context_get_plugin('reaction', 'islandora_context_reaction_insert_text')) {
    if ($markup = $plugin->execute()) {
      array_push($rendered, $markup);
    }
  }
}

/**
 * Implements hook_islandora_metadata_display_info().
 */
function islandora_context_islandora_metadata_display_info() {
  return array(
    'islandora_context' => array(
      'label' => t('Islandora Solr Metadata managed by the Islandora Context module'),
      'description' => t('Context-sensitive metadata display driven by the Islandora Solr Search module'),
      'metadata callback' => 'islandora_context_solr_metadata_display_callback',
      'description callback' => 'islandora_context_solr_metadata_description_callback',
      'configuration' => 'admin/islandora/search/islandora_solr/metadata',
    ),
  );
}

/**
 * Metadata display callback for rendering metadata from Solr.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 * @param bool $print
 *   Whether this is for printing purposes.
 *
 * @return string
 *   Markup representing the metadata display pulled from Solr.
 */
function islandora_context_solr_metadata_display_callback(AbstractObject $object, $print = FALSE) {
  if ($plugin = context_get_plugin('reaction', 'islandora_context_reaction_display_solr_metadata')) {
    if ($markup = $plugin->execute($object));
    return $markup;
  }
  else {
    return FALSE;
  }
}

/**
 * Metadata display callback for rendering metadata from Solr.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return string
 *   Markup representing the metadata display pulled from Solr.
 */
function islandora_context_solr_metadata_description_callback(AbstractObject $object) {
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function islandora_context_form_islandora_solr_metadata_config_form_alter(&$form, &$form_state, $form_id) {
  $note = t("Note: Display configurations used in by Islandora Context don't use content models.");
  $form['islandora_solr_metadata_cmodels']['table_wrapper']['cmodel_options']['#description'] = $note;
}
